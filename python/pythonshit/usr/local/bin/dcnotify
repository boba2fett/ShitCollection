#!/usr/bin/env python3
import requests
import time
import json
import os
import sys
import datetime
from pyfcm import FCMNotification
import logging
from systemd.journal import JournalHandler
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, DateTime, Boolean
from sqlalchemy.sql import func

log = logging.getLogger("dcnotify")
log.addHandler(JournalHandler())
log.setLevel(logging.INFO)

PRE_PATH = ""#"/home/bf/git/ShitCollection/pythonshit"

with open(PRE_PATH+'/etc/python-shit/discordnotify.json', 'r') as json_file:
    config = json.load(json_file)
    log.info("Config loaded")

push_service = FCMNotification(
    api_key=config["api_key"])
registration_ids = config["registration_ids"]
headers = {
    'User-Agent': 'Mozilla/51.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0'}

names = config["names"]
oldStates = {name: False for name in names}  # False means offline

if config['dbcollect']:
    engine = create_engine('sqlite:///'+PRE_PATH +
                           '/etc/python-shit/dcdata.db')
    meta = MetaData()
    conn = engine.connect()

    dcOn = Table(
        'dcOn', meta,
        Column('timestamp', DateTime(timezone=True)),
        Column('user', String),
        Column('online', Boolean),
    )
    meta.create_all(engine)


def mainloop():
    while True:
        try:
            states = loadNewData()
            for name in names:
                if states[name] != oldStates[name]:  # if online state changed
                    sendOnlineMsg(name, states, oldStates)
                dbCollect(name, states)
            time.sleep(250)
        except Exception as e:
            sendError(e)
            time.sleep(600)


def loadNewData():
    dcData = requests.get(
        config["server"], headers=headers).text  # link is under server settings widgets or similar
    dc = json.loads(dcData)
    on = [x['username'] for x in dc['members']]
    return {name: name in on for name in names}


def sendOnlineMsg(name, states, oldStates):
    try:
        message_title = f'[{datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")}]'
        message_body = f'{name} {"now on" if not oldStates[name] else "now off"}'
        push_service.notify_multiple_devices(
            registration_ids=registration_ids, message_title=message_title, message_body=message_body)
        log.info(f'Online Message gesendet [name={name}]')
        oldStates[name] = states[name]
    except Exception as e:
        log.error(f'Online Message failed because of [{str(e)}]')


def dbCollect(name, states):
    try:
        if config['dbcollect']:
            conn.execute(dcOn.insert().values(
                    timestamp=datetime.datetime.now(),
                    user=name,
                    online=states[name]
                )
            )
    except Exception as e:
        sendError(e)


def sendError(e):
    try:
        message_title = f'[{datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")}]'
        message_body = str(e)
        push_service.notify_multiple_devices(
            registration_ids=registration_ids, message_title=message_title, message_body=message_body)
        log.warning(f'Error Message gesendet f√ºr [{str(e)}]')

    except Exception as e2:
        log.error(
            f'Error Message failed because of [{str(e2)}] for [{str(e)}]')


mainloop()
